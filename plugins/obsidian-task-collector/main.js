/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var D=Object.defineProperty;var J=Object.getOwnPropertyDescriptor;var K=Object.getOwnPropertyNames;var q=Object.prototype.hasOwnProperty;var Z=(r,t)=>{for(var e in t)D(r,e,{get:t[e],enumerable:!0})},Q=(r,t,e,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of K(t))!q.call(r,i)&&i!==e&&D(r,i,{get:()=>t[i],enumerable:!(s=J(t,i))||s.enumerable});return r};var ee=r=>Q(D({},"__esModule",{value:!0}),r);var pe={};Z(pe,{default:()=>ge});module.exports=ee(pe);var T=require("obsidian");var j=require("obsidian");var u="\xD8",d="text",m="default",C="complete",L={groups:{default:{name:m,marks:" ",complete:!1,removeExpr:"",appendDateFormat:"",registerCommand:!1,useContextMenu:!1},complete:{name:C,marks:"xX",complete:!0,removeExpr:"",appendDateFormat:"",registerCommand:!1,useContextMenu:!1}},markCycle:"",collectionEnabled:!1,previewClickModal:!0,contextMenu:{markTask:!0,resetTask:!1,resetAllTasks:!1,collectTasks:!0},debug:!1,convertEmptyLines:!1,hideNotifications:!1,skipSectionMatch:"",version:{major:0,minor:0,patch:0}},P={name:m,marks:"",complete:!1,removeExpr:"",appendDateFormat:"",registerCommand:!1,useContextMenu:!1};var H={areaHeading:"## Log",removeCheckbox:!1},F={useContextMenu:!1,completedMarks:"",incompleteMarks:"",skipSectionExpr:null,marks:{},removeExpr:{},undoExpr:{},areaHeadings:[],headingToMark:{}},O={completedAreaHeader:"## Log",removeExpression:"",appendDateFormat:"",appendRemoveAllTasks:!1,incompleteTaskValues:" ",onlyLowercaseX:!1,supportCanceledTasks:!0,previewOnClick:!1,rightClickComplete:!1,rightClickMark:!1,rightClickMove:!1,rightClickResetTask:!1,rightClickResetAll:!1,rightClickToggleAll:!1,completedAreaRemoveCheckbox:!1};var f={constructSettings:te,createSettingsGroup:N,sanitize:V,sanitizeMarks:w,moveGroup:b};function w(r){let t=Array.from(new Set(r));return t.sort(),t.join("").replace(u,"")}function V(r,t){r.tc.logDebug("sanitize begin",t);let e=!1;t.markCycle&&(t.markCycle=[...new Set(t.markCycle)].join("")),Object.entries(t.groups).filter(([i,a])=>i!==a.name).forEach(([i,a])=>{e=!0,t.groups[a.name]?(console.warn(`(TC) Group named ${a.name} already exists. Reverting group name to ${i}`),a.name=i):b(t.groups,i,a.name)}),R(t.groups[d])&&(e=!0,t.groups[d].marks=u);let s=Object.entries(t.groups).filter(([i,a])=>!R(a));if(s.length>1){e=!0,console.warn(`(TC) There can be only one group for text-only settings (${d}).`),t.groups[d]||(console.info(`(TC) Configuration: renamed group ${s[0][1].name} to ${d}.`),b(t.groups,s[0][1].name,d));let i="",a;Object.entries(t.groups).filter(([n,o])=>!R(o)).filter(([n,o])=>n!==d).forEach(([n,o])=>{[i,a]=ne(i),t.groups[n].marks=a})}else s.length==1&&s[0][1].name!==d&&(console.info(`(TC) Configuration: renamed group ${s[0][1].name} to ${d}.`),b(t.groups,s[0][1].name,d));t.groups[d]&&t.groups[d].collection&&delete t.groups[d].collection,e&&r.tc.notify("(TC) Configuration settings were modified. See console for details."),r.tc.logDebug("sanitize end",t)}async function te(r,t){return t.version?await se(r,t):await ie(r,t)}async function se(r,t){let e={...L,...t};V(r,e);let s=_(r.manifest.version);return ae(s,e.version)===0||(e.version=s,await r.saveData(e)),e}async function ie(r,t){console.info("(TC) Migrating 0.x settings to the current version"),console.debug("0.x settings",t);let e={...O,...t},s=JSON.parse(JSON.stringify(L));s.previewClickModal=e.previewOnClick,s.contextMenu.markTask=e.rightClickMark,s.contextMenu.resetTask=e.rightClickResetTask,s.groups[C].useContextMenu=e.rightClickComplete;let i;return i="x",e.onlyLowercaseX||(i+="X"),e.supportCanceledTasks&&(i+="-"),s.groups[C].marks=w(i),s.groups[C].appendDateFormat=e.appendDateFormat,s.groups[C].removeExpr=e.removeExpression,i=e.incompleteTaskValues,s.groups[m].marks=w(i),e.appendRemoveAllTasks&&(s.groups[m].appendDateFormat=e.appendDateFormat,s.groups[m].removeExpr=e.removeExpression),s.collectionEnabled=!0,s.contextMenu.collectTasks=e.rightClickMove||!1,t.cycleTaskValues&&(s.markCycle=t.cycleTaskValues,t.incompleteTaskValuesRow2&&N(s.groups,"group-2",{marks:w(t.incompleteTaskValuesRow2),appendDateFormat:t.appendTextFormatMarkRow2}),t.appendTextFormatMark&&(s.groups[m].appendDateFormat=t.appendTextFormatMark),t.appendTextFormatAppend&&N(s.groups,d,{marks:u,appendDateFormat:t.appendTextFormatAppend,useContextMenu:t.rightClickAppend}),console.log(s.groups),s.collectionEnabled=!1),s.collectionEnabled&&(s.groups[C].collection={areaHeading:e.completedAreaHeader,removeCheckbox:e.completedAreaRemoveCheckbox}),s.version=_(r.manifest.version),r.tc.logDebug("migrated settings",s),await r.saveData(s),s}function N(r,t,e){r[t]={...P,name:t,...e},r[t].marks===""&&(r[t].marks=u)}function _(r){let t=r.split(".");return{major:Number(t[0]),minor:Number(t[1]),patch:Number(t[2])}}function ae(r,t){return r.major===t.major?r.minor===t.minor?r.patch-t.patch:r.minor-t.minor:r.major-t.major}function R(r){return r&&r.marks!==""&&r.marks!==u}function b(r,t,e){!r||!t||!e||e===t||(r[e]?console.warn(`(TC) Can not move group, ${e} already exists`):(r[t].name=e,r[e]=r[t],delete r[t]))}function ne(r){let t=0;do{let e=String.fromCharCode(9812+Math.random()*20);if(r.indexOf(e)<0)return r+=e,[r,e];t++}while(t<10);return[r,"\u24E7"]}var oe=/^(Y|D|M|H|h|m)+$/,re=/(\[[^[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;var x=class{constructor(){this.anyListItem=new RegExp(/^([\s>]*(?:-|\d+\.) )([^\\[].*)$/);this.anyTaskMark=new RegExp(/^([\s>]*(?:-|\d+\.) \[)(.)(\] .*)$/);this.anyText=new RegExp(/^([\s>]*)(.*)$/);this.blockQuote=new RegExp(/^(\s*>[\s>]*)(.*)$/);this.blockRef=new RegExp(/^(.*?)( \^[A-Za-z0-9-]+)?$/);this.continuation=new RegExp(/^( {2,}|\t)/);this.stripTask=new RegExp(/^([\s>]*(?:-|\d+\.)) \[.\] (.*)$/)}init(t){this.settings=t,this.cache=JSON.parse(JSON.stringify(F)),this.cache.useContextMenu=t.contextMenu.markTask||t.contextMenu.resetTask||t.contextMenu.collectTasks||t.contextMenu.resetAllTasks,Object.values(t.groups).forEach(e=>this.cacheTaskSettings(e,this.cache)),this.settings.collectionEnabled&&(this.cache.areaHeadings=[...Object.keys(this.cache.headingToMark)],this.cache.areaHeadings.sort()),this.cache.completedMarks=f.sanitizeMarks(this.cache.completedMarks),this.cache.incompleteMarks=f.sanitizeMarks(this.cache.incompleteMarks),this.cache.skipSectionExpr=U(t.skipSectionMatch),this.logDebug("configuration read",this.settings,this.cache)}isDirty(t){return JSON.stringify(this.settings)!==JSON.stringify(t)}logDebug(t,...e){(!this.settings||this.settings.debug)&&console.debug("(TC) "+t,...e)}notify(t){this.settings&&this.settings.hideNotifications?console.log(t):new j.Notice(t)}cacheTaskSettings(t,e){t.marks.split("").forEach(s=>{if(e.marks[s]){let i=e.marks[s].name;console.warn(`Two groups of settings contain ${s}: ${i} and ${t.name}. Using ${i}`)}else{if(e.marks[s]=t,e.useContextMenu==e.useContextMenu||t.useContextMenu,t.removeExpr){let i=X(t.removeExpr);e.removeExpr[t.name]=i}if(t.appendDateFormat){let i=B(t.appendDateFormat);e.undoExpr[t.name]=i}t.collection&&t.collection.areaHeading&&(e.headingToMark[t.collection.areaHeading]?e.headingToMark[t.collection.areaHeading]+=s:e.headingToMark[t.collection.areaHeading]=s),s!==u&&(t.complete?e.completedMarks+=s:e.incompleteMarks+=s)}})}markInCycle(t,e,s=[]){let i=t.split(`
`),a=this.settings.markCycle.length;for(let n of s){let o=this.anyTaskMark.exec(i[n]),c=this.anyListItem.exec(i[n]);if(o){let l=o[2],p=this.settings.markCycle.indexOf(l),k=p<0?e==1?0:a-1:e==1?(p+1)%a:(p+a-1)%a;i[n]=this.doMarkTask(i[n],l,this.settings.markCycle[k])}else c&&c[2]&&(i[n]=this.updateLineText(`${c[1]}[ ] ${c[2]}`,this.settings.markCycle[e==1?0:a-1]))}return i.join(`
`)}markSelectedTask(t,e,s=[]){let i=t.split(`
`);for(let a of s)i[a]=this.updateLineText(i[a],e);return i.join(`
`)}updateLineText(t,e){if(e==="Backspace")return this.doRemoveTask(t);if(e===""&&(e=u),e===u&&this.cache.marks[u])return this.doAppendText(t);let s=this.anyTaskMark.exec(t);if(s){let a=s[2];return this.doMarkTask(t,a,e)}let i=this.anyListItem.exec(t);if(i&&i[2])return this.updateLineText(`${i[1]}[ ] ${i[2]}`,e);if(t&&this.settings.convertEmptyLines){let a=this.anyText.exec(t);return this.updateLineText(`${a[1]}- [ ] ${a[2]}`,e)}return this.logDebug("not a task or list item %s",`|${t}|`),t}doAppendText(t,e=!0){let s="",i=t.endsWith("  "),a=this.blockRef.exec(t);a&&a[2]&&(t=a[1],s=a[2]);let n=this.cache.undoExpr[d];if(n&&(t=t.replace(n,"")),e){let o=this.cache.removeExpr[d];o&&(t=t.replace(o,""));let c=this.settings.groups[d].appendDateFormat;c&&(t.endsWith(" ")||(t+=" "),t+=window.moment().format(c))}return t=t.replace(/\s*$/,s),i&&(t+="  "),this.logDebug("text updated",`|${t}|`),t}doMarkTask(t,e,s){if(e===s)return this.logDebug("task already marked",`|${t}|`),t;this.logDebug("mark task",`|${t}|`);let i=this.cache.marks[e]?.name||m,a=this.cache.marks[s]?.name||m;t=t.replace(this.anyTaskMark,`$1${s}$3`);let n="",o=t.endsWith("  "),c=this.blockRef.exec(t);c&&c[2]&&(t=c[1],n=c[2]);let l=this.cache.undoExpr[i];l&&(t=t.replace(l,""));let p=this.cache.removeExpr[a];p&&(t=t.replace(p,""));let k=this.settings.groups[a].appendDateFormat;return k&&(t.endsWith(" ")||(t+=" "),t+=window.moment().format(k)),t=t.replace(/\s*$/,n),o&&(t+="  "),this.logDebug("task marked",`|${t}|`),t}doRemoveTask(t){return t.replace(this.stripTask,"$1 $2")}resetAllTasks(t){let e=t.split(`
`),s=[],i=!1,a=!1;for(let n of e){let o=n.trim();i||a?((n.startsWith("#")||o==="---")&&(a=this.isSkippedSection(n),i=M(this.cache.areaHeadings,o)!=null),s.push(n)):o.startsWith("#")||o==="---"?(i=M(this.cache.areaHeadings,o)!=null,a=this.isSkippedSection(n),s.push(n)):i||a||s.push(n.replace(this.anyTaskMark,"$1 $3"))}return s.join(`
`)}moveAllTasks(t){if(this.cache.areaHeadings.length==0)return t;let e=[],s=[],i=this.scan(t,e,s),a=this.move(e,i,s,0);for(let n=0;n<s.length;n++){let[o,c]=s[n].split("%:%"),l=Number(c);i[o].blocks[l].existing=this.move(i[o].blocks[l].existing,i,s,n,this.cache.headingToMark[o])}return a.flatMap(n=>{let o=n.match(/%%--TC--(.*)--(\d+)--%%/);if(o){let c=o[1],l=Number(o[2]);return i[c].blocks[l].newTasks.concat(...i[c].blocks[l].existing)}return n}).join(`
`)}scan(t,e,s){let i=t.split(`
`);this.ensureHeadings(i);let a={},n=null;for(let o of i){let c=o.trim();if(o.startsWith("#")&&M(this.cache.areaHeadings,c)){e.push(o);let l=this.createCompletionArea(c,a);n=a[c].blocks[l].existing,e.push(`%%--TC--${c}--${l}--%%`),s.push(`${c}%:%${l}`)}else n&&(o.startsWith("#")||o.trim()==="---")?(n=null,e.push(o)):n?n.push(o):e.push(o)}return a}move(t,e,s,i,a){let n=[],o=null,c=null,l=!1,p=!1,k=-1;for(let g of t){if(k++,(g.startsWith("#")||g.trim()==="---")&&(p=this.isSkippedSection(g),console.debug("TC: section",g,p)),c&&!this.isTaskLine(g)&&this.isContinuation(g,l,t,k)){c.push(g);continue}if(c&&(this.moveMark(o,c,e,s,i),o=null,c=null,l=!1),g.startsWith("%%--TC--")){i=ce(g),n.push(g);continue}let I=this.anyTaskMark.exec(g);if(p)n.push(g);else if(I){let v=I[2];a&&a.indexOf(v)>=0?n.push(g):this.isCollected(v)?(this.removeCheckbox(v)&&(g=this.doRemoveTask(g)),o=v,c=[],c.push(g),l=this.isCallout(g)):n.push(g)}else n.push(g)}return c&&o&&this.moveMark(o,c,e,s,i),n}moveMark(t,e,s,i,a){let n=this.cache.marks[t].collection.areaHeading,o=this.findNextSection(n,i,a);e.forEach(c=>s[n].blocks[o].newTasks.push(c))}findNextSection(t,e,s){let i=!1;for(let a=s;!i||a!=s;a++)if(a==e.length&&(a=0,i=!0),e[a].startsWith(t)){let[n,o]=e[a].split("%:%");return Number(o)}}createCompletionArea(t,e){return e[t]||(e[t]={blocks:[]}),e[t].blocks.push({existing:[],newTasks:[]}),e[t].blocks.length-1}ensureHeadings(t){this.cache.areaHeadings.forEach(e=>{M(t,e)||(t[t.length-1].trim()!==""&&t.push(""),t.push(e),t.push(""))})}isCollected(t){return this.cache.marks[t]&&this.cache.marks[t].collection&&this.cache.marks[t].collection.areaHeading}removeCheckbox(t){return this.cache.marks[t]&&this.cache.marks[t].collection&&this.cache.marks[t].collection.removeCheckbox}isSkippedSection(t){return this.cache.skipSectionExpr&&this.cache.skipSectionExpr.test(t)}isCallout(t){return this.blockQuote.test(t)}isTaskLine(t){return this.anyTaskMark.test(t)}isContinuation(t,e,s,i){if(e){let a=this.blockQuote.exec(t);if(a)return a[1].endsWith(">")||a[1].endsWith("  ")||a[1].endsWith("	")}if(t.length==0){let a=i+1;for(;a<s.length;){if(s[a].length>0)return this.continuation.test(s[a]);a++}}return this.continuation.test(t)}};function M(r,t){return r.find(e=>e===t)}function ce(r){let t=r.match(/%%--TC--(.*)--(\d+)--%%/);if(t)return Number(t[2])}var G={tryCompleteRegex:le,tryIncompleteRegex:he,tryUndoRegex:B,tryRemoveTextRegex:X,trySkipSectionRegex:U};function U(r){return r?new RegExp(r):null}function le(r){return new RegExp(`^([\\s>]*- \\[)[${r}](\\] .*)$`)}function he(r){return new RegExp(`^([\\s>]*- \\[)[${r}](\\] .*)$`)}function X(r){return r?new RegExp(r):null}function B(r){let t=r.match(re);for(let s=0,i=t.length;s<i;s++){let a=t[s];oe.test(a)?t[s]=a.replace(/YYYY/g,"\\d{4}").replace(/YY/g,"\\d{2}").replace(/DD/g,"\\d{2}").replace(/D/g,"\\d{1,2}").replace(/MMM/g,"[A-Za-z]{3}").replace(/MM/g,"\\d{2}").replace(/M/g,"\\d{1,2}").replace(/HH/g,"\\d{2}").replace(/H/g,"\\d{1,2}").replace(/hh/g,"\\d{2}").replace(/h/g,"\\d{1,2}").replace(/mm/g,"\\d{2}").replace(/m/g,"\\d{1,2}"):a.match(/\[[\s\S]/)?t[s]=Y(a.replace(/^\[|\]$/g,"")):t[s]=Y(a)}let e=`\\s*${t.join("")}\\s*`;return new RegExp(e+"( \\^[A-Za-z0-9-]+)?$")}function Y(r){return r.replace(/\(/g,"\\(").replace(/\)/g,"\\)").replace(/\[/g,"\\[").replace(/\]/g,"\\]")}var h=require("obsidian");var S=class extends h.PluginSettingTab{constructor(e,s,i){super(e,s);this.markInputCache={};this.otherInputCache={};this.plugin=s,this.tc=i}async save(){f.sanitize(this.plugin,this.newSettings),this.tc.isDirty(this.newSettings)&&(this.tc.init(this.newSettings),await this.plugin.saveSettings(),this.tc.notify("(TC) Configuration saved"))}hide(){this.save()}display(){this.newSettings=JSON.parse(JSON.stringify(this.tc.settings)),this.drawElements()}drawElements(){this.containerEl.empty(),this.containerEl.addClass("task-collector-settings"),new h.Setting(this.containerEl).setHeading().setName("Task Collector"),new h.Setting(this.containerEl).setName("Save settings").setClass("task-collector-save-reset").addButton(e=>e.setIcon("reset").setTooltip("Reset to previously saved (or generated) values").onClick(()=>{this.newSettings=JSON.parse(JSON.stringify(this.tc.settings)),this.display();let s="(TC) Configuration reset";this.tc.settings.hideNotifications?console.log(s):new h.Notice(s),new h.Notice("(TC) Configuration reset")})).addButton(e=>{e.setIcon("save").setTooltip("Save current values").onClick(async()=>{await this.save()}),this.saveButton=e.buttonEl}),new h.Setting(this.containerEl).setName("Task Collection").setDesc("Enable task collection (additional task group settings when enabled)").addToggle(e=>e.setValue(this.newSettings.collectionEnabled).onChange(async s=>{let i=s!=this.newSettings.collectionEnabled;this.newSettings.collectionEnabled=s,i&&this.drawElements()})),new h.Setting(this.containerEl).setName("Define task mark cycle").setDesc("Specify characters (as a string) for Previous/Next commands").addText(e=>e.setPlaceholder("").setValue(this.newSettings.markCycle).onChange(async s=>{this.newSettings.markCycle=[...new Set(s)].join("")})),new h.Setting(this.containerEl).setName("Convert non-list lines").setDesc("Converts non-list lines when marking tasks").addToggle(e=>e.setValue(this.newSettings.convertEmptyLines).onChange(async s=>{this.newSettings.convertEmptyLines=s})),new h.Setting(this.containerEl).setName("Skip matching sections").setDesc("When collecting tasks, skip content of sections that match the specified pattern").addText(e=>e.setPlaceholder("").setValue(this.newSettings.skipSectionMatch).onChange(async s=>{this.newSettings.skipSectionMatch=s})),new h.Setting(this.containerEl).setHeading().setName("Task Groups"),this.containerEl.createEl("p",{text:"Task collector configures tasks in groups. Each group can be associated with one or more task marks ('x' or '>'). The default group configuration will apply to any mark not otherwise assigned to a group."}),this.containerEl.createEl("p",{text:"Marks that you define within the following groups appear in the selection modal. Those marks that 'complete' a task will appear in the top row."}),this.groupList=this.containerEl.createEl("dl"),this.showTaskGroups(),new h.Setting(this.containerEl).setClass("tc-create-task-group").addButton(e=>e.setTooltip("Add a new task group").setButtonText("+").onClick(()=>{let s=`group-${Object.values(this.newSettings.groups).length}`;f.createSettingsGroup(this.newSettings.groups,s,{}),this.showTaskGroups()})),new h.Setting(this.containerEl).setHeading().setName("Menus and Modals"),this.containerEl.createEl("p",{text:"Task Collector creates commands that can be bound to hotkeys or accessed using slash commands for marking tasks. The following settings add right click context menu items for those commands."}),new h.Setting(this.containerEl).setName("Click handling: Prompt when the checkbox is clicked in Reading or Live preview mode").setDesc("When you click a checkbox, display a panel that allows you to select (with mouse or keyboard) the value to assign.").addToggle(e=>e.setValue(this.newSettings.previewClickModal).onChange(async s=>{this.newSettings.previewClickModal=s})),new h.Setting(this.containerEl).setName("Add '(TC) Mark task' menu item").setDesc("Add an item to the right-click menu to mark the task on the current line (or within the current selection). This menu item will trigger a quick pop-up modal to select the desired mark value.").addToggle(e=>e.setValue(this.newSettings.contextMenu.markTask).onChange(async s=>{this.newSettings.contextMenu.markTask=s})),new h.Setting(this.containerEl).setName("Add `(TC) Collect Tasks` menu item").setDesc("Add an item to the right-click menu to collect tasks (based on task configuration).").addToggle(e=>e.setValue(this.newSettings.contextMenu.collectTasks).onChange(async s=>{this.newSettings.contextMenu.collectTasks=s})),new h.Setting(this.containerEl).setName("Add '(TC) Reset All Tasks' command and menu item").setDesc("Add a command and an item to the right-click menu to reset/clear all tasks in the current file.").addToggle(e=>e.setValue(this.newSettings.contextMenu.resetAllTasks).onChange(async s=>{this.newSettings.contextMenu.resetAllTasks=s})),new h.Setting(this.containerEl).setHeading().setName("Other settings"),new h.Setting(this.containerEl).setName("Hide notifications").setDesc("Hide pop-up notification messages (messages will be logged in the developer console)").addToggle(e=>e.setValue(this.newSettings.hideNotifications).onChange(async s=>{this.newSettings.hideNotifications=s})),new h.Setting(this.containerEl).setName("Debug").setDesc("Enable debug messages").addToggle(e=>e.setValue(this.newSettings.debug).onChange(async s=>{this.newSettings.debug=s}))}showTaskGroups(){this.markInputCache={},this.otherInputCache={},this.groupList.empty(),this.clearButtonErrors(),this.createGroupItem(this.newSettings.groups[m]),Object.values(this.newSettings.groups).filter(e=>e.name!=m).forEach(e=>{this.createGroupItem(e)})}createGroupItem(e){let s=this.groupList.createEl("dt"),i=this.groupList.createEl("dd"),a=new h.Setting(s).setName("Group name").setDesc("Name for this group").setClass("task-group-name");if(e.name===d&&a.addExtraButton(n=>{n.setIcon("info").setTooltip("This is a special group that supports appending text to arbitrary lines of text").setDisabled(!0)}),a.addText(n=>{n.setPlaceholder(C).setValue(e.name).setDisabled(e.name===m).onChange((0,h.debounce)(o=>{let c=this.newSettings.groups[o];o?c&&c!=e?(n.inputEl.addClass("data-value-error"),n.inputEl.setAttribute("aria-label","This name is already used by another group")):(n.inputEl.removeClass("data-value-error"),n.inputEl.removeAttribute("aria-label"),f.moveGroup(this.newSettings.groups,e.name,o),o===d&&(e.marks=u,this.drawElements())):(n.inputEl.addClass("data-value-error"),n.inputEl.setAttribute("aria-label","A group name is required.")),this.testForErrors()},50,!0)),this.addToCache(n.inputEl,"name-setting")}),a.addExtraButton(n=>{n.setIcon(e.name===m?"info":"trash").setTooltip(e.name===m?"Default task settings":"Delete this group").setDisabled(e.name===m).onClick(async()=>{delete this.newSettings.groups[e.name],this.showTaskGroups()})}),e.name===m?a.controlEl.addClass("default-group"):e.name===d&&a.controlEl.addClass("text-only-group"),e.name!==d){let n=new h.Setting(i).setName("Task marks").setClass("task-marks");e.name!==m?(n.addToggle(o=>{o.setValue(e.complete),o.setTooltip("If enabled, this group represents completed items. Completed items appear in the top row of the selection menu.").onChange(async c=>{e.complete=c})}),n.setDesc("Set one or marks associated with this group as a string. e.g. '>?!'. Use a space for unmarked tasks. Enable the toggle if this group represents completed tasks.")):n.setDesc("Set one or marks associated with this group as a string. e.g. '>?!'. Use a space for unmarked tasks. "),n.addText(o=>{o.setPlaceholder("xX").onChange((0,h.debounce)(c=>{let l=f.sanitizeMarks(c);l!=c&&(o.inputEl.value=l),l!=e.marks&&(this.removeMarks(e.marks,o.inputEl),e.marks=l,n.controlEl.setAttribute("marks",e.marks),this.findDuplicates(o.inputEl))},50,!0)),e.marks=f.sanitizeMarks(e.marks),o.setValue(e.marks),n.controlEl.setAttribute("marks",e.marks),this.findDuplicates(o.inputEl)})}new h.Setting(i).setName(`Append date to ${this.getDescription(e)}`).setDesc(`Append today's date in the given moment.js format to the end of the ${this.getDescription(e)}`).addMomentFormat(n=>{n.setPlaceholder("YYYY-MM-DD").setValue(e.appendDateFormat).onChange((0,h.debounce)(o=>{try{let c=window.moment().format(o);n.inputEl.removeClass("data-value-error"),n.inputEl.setAttribute("aria-label",c),e.appendDateFormat=o}catch{n.inputEl.addClass("data-value-error"),n.inputEl.setAttribute("aria-label","An error occurred parsing this moment string. See log for details."),console.error(`Error parsing specified date format for ${e.name}: ${o}`)}this.testForErrors()},200,!0)),this.addToCache(n.inputEl,"moment-format")}),new h.Setting(i).setName(`Remove text matching pattern from ${this.getDescription(e)}`).setDesc(`Text matching this regular expression will be removed from ${this.getDescription(e)}. Be careful! Test your expression first. The global flag ('g') is used for a per-line match.`).addText(n=>n.setPlaceholder(" #(todo|task)").setValue(e.removeExpr).onChange((0,h.debounce)(o=>{try{G.tryRemoveTextRegex(o),e.removeExpr=o,this.tc.logDebug("remove regex",e.name,e.removeExpr)}catch{console.error(`Error parsing specified text replacement regular expression for ${e.name}: ${o}`)}},50,!0))),new h.Setting(i).setName("Register '(TC) Mark with... ' command").setDesc(e.name===d?"A command will be registered to append text to selected lines":"A command will be registered for each mark in the group.").addToggle(n=>n.setValue(e.registerCommand).onChange(o=>{e.registerCommand=o})),new h.Setting(i).setName("Add '(TC) Mark with... ' menu item").setDesc("A right-click menu item will be added for each mark in the group.").addToggle(n=>n.setValue(e.useContextMenu).onChange(async o=>{e.useContextMenu=o})),this.newSettings.collectionEnabled&&e.name!==d&&(e.collection||(e.collection=JSON.parse(JSON.stringify(H))),new h.Setting(i).setName("Area heading").setClass("area-heading").setDesc("Marked tasks will be collected and moved under the specified heading. Task collection for a group only occurs when an area heading is configured.").addText(n=>n.setPlaceholder("## Example").setValue(e.collection.areaHeading).onChange(async o=>{e.collection.areaHeading=o})),new h.Setting(i).setName("Remove checkbox").setClass("remove-checkbox").setDesc("When a task is collected, remove the checkbox").addToggle(n=>n.setValue(e.collection.removeCheckbox).onChange(async o=>{e.collection.removeCheckbox=o})))}removeMarks(e,s){let i=e?e.split(""):[];this.tc.logDebug(`removeMarks begin: '${e}'`,this.markInputCache),s.hasClass("no-marks-defined")&&(s.removeClass("no-marks-defined"),s.removeClass("data-value-error"),s.removeAttribute("aria-label")),i.forEach(a=>{if(this.tc.logDebug(`(TC): remove mark '${a}'`,this.markInputCache[a]),this.markInputCache[a]){let n=this.markInputCache[a];n.delete(s),this.tryRemoveConflict(a,s),n.size==1&&n.forEach(o=>this.tryRemoveConflict(a,o))}}),this.tc.logDebug(`removeMarks end: '${e}'`,this.markInputCache)}findDuplicates(e){let s=e.value?e.value.split(""):[];this.tc.logDebug(`findDuplicates begin: '${e.value}'`,s,e,this.markInputCache),s.forEach(i=>{if(this.markInputCache[i]){let a=this.markInputCache[i];a.add(e),a.size>1&&(a.forEach(n=>this.trySetConflict(i,n)),console.error(`(TC) More then one group uses task mark ${this.showMark(i)}`))}else this.markInputCache[i]=new Set,this.markInputCache[i].add(e)}),s.length==0&&(e.addClass("no-marks-defined"),e.addClass("data-value-error"),e.setAttribute("aria-label",this.newSettings.groups[d]?"Must define one or more marks for this group.":`Must define one or more marks for this group. Change the name to '${d}' for special text-only behavior.`),this.tc.logDebug(`findDuplicates end (empty): '${e.value}'`,e,this.markInputCache)),this.tc.logDebug(`findDuplicates end: '${e.value}'`,e,this.markInputCache),this.testForErrors()}trySetConflict(e,s){let i=s.getAttribute("conflict")||"",a=f.sanitizeMarks(i+e);s.setAttribute("conflict",a),s.addClass("data-value-error"),s.setAttribute("aria-label",`More than one task group uses ${this.showMark(a)}`),this.tc.logDebug(`conflicts for '${s.value}': '${this.showMark(a)}'`)}tryRemoveConflict(e,s){if(!s.hasAttribute("conflict"))return;let i=s.getAttribute("conflict").replace(e,"");i.length==0?(s.removeAttribute("conflict"),s.removeClass("data-value-error"),s.removeAttribute("aria-label")):(s.removeAttribute("conflict"),this.trySetConflict(i,s))}getDescription(e){return e.name===d?"selected lines of text":"selected task(s)"}showMark(e){return e==u?"(empty)":e}clearButtonErrors(){this.saveButton.removeClass("data-value-error"),this.saveButton.removeAttribute("aria-label")}testForErrors(){let e=Object.values(this.markInputCache).flatMap(i=>Array.from(i.values())).find(i=>i.hasClass("data-value-error")),s=Object.values(this.otherInputCache).find(i=>i.hasClass("data-value-error"));e||s?(this.saveButton.addClass("data-value-error"),this.saveButton.setAttribute("aria-label","There are configuration errors. Correct those before saving.")):(this.saveButton.removeClass("data-value-error"),this.saveButton.removeAttribute("aria-label"))}addToCache(e,s){let i=Object.values(this.otherInputCache).length;this.otherInputCache[`${s}-${i}`]=e,e.setAttribute("cache-id",`${s}-${i}`)}removeFromCache(e){let s=e.getAttribute("cache-id");s&&delete this.otherInputCache[s]}};var W=require("obsidian");function E(r,t){return new Promise(e=>{let s=new $(r,t);s.onClose=()=>{e(s.chosenMark)},s.open()})}var $=class extends W.Modal{constructor(t,e){super(t),this.taskCollector=e,this.containerEl.id="taskcollector-modal"}onOpen(){let t=this.contentEl.createDiv("taskcollector-selector markdown-preview-view"),e=t.createEl("ul");e.addClass("contains-task-list"),this.addTaskValues(e,this.taskCollector.cache.completedMarks,!0);let s=t.createEl("ul");s.addClass("contains-task-list"),this.addTaskValues(s,this.taskCollector.cache.incompleteMarks,!1);let i=t.createEl("nav"),a=i.createSpan();a.innerHTML="<b>esc</b> to dismiss";let n=i.createSpan();n.innerHTML="<b>bksp</b> to remove <code>[]</code>";let o=this,c=function(l){switch(l.key){case"ArrowLeft":case"ArrowRight":case"ArrowUp":case"ArrowDown":case"CapsLock":case"Tab":break;default:o.chosenMark=l.key,l.preventDefault(),l.stopImmediatePropagation(),o.close()}};this.scope.register([],null,c),this.scope.register(["Shift"],null,c)}addTaskValues(t,e,s){let i=this;for(let a of e){let n=t.createEl("li",{cls:"task-list-item "+(a==" "?"":" is-checked"),attr:{"data-task":a}});n.addEventListener("click",function(c){i.chosenMark=a,i.close()});let o=n.createEl("input",{cls:"task-list-item-checkbox",attr:{id:"task-list-item-checkbox-"+a,type:"checkbox",style:"pointer-events: none;"}});a!=" "&&o.setAttribute("checked",""),n.createEl("span",{text:a==" "?"\u2423":a,attr:{style:"pointer-events: none;"}})}}onClose(){this.contentEl.empty()}};var y=class{constructor(t,e){this.app=t,this.taskCollector=e}getCompletedTaskValues(){return this.taskCollector.cache.completedMarks}getIncompleteTaskValues(){return this.taskCollector.cache.incompleteMarks}getMark(){return E(this.app,this.taskCollector)}isComplete(t){return this.getCompletedTaskValues().contains(t)}isCanceled(t){return t==="-"}};var z=require("@codemirror/view"),A=class extends T.Plugin{constructor(){super(...arguments);this.handlersRegistered=!1;this.commandsRegistered=!1;this.cmExtension=[]}async onload(){console.info("loading Task Collector (TC) v"+this.manifest.version),this.tc=new x,this.addSettingTab(new S(this.app,this,this.tc)),await this.loadSettings(),this.tc.settings.previewClickModal&&(this.cmExtension.push(de(this,this.tc)),this.registerEditorExtension(this.cmExtension)),this.registerCommands(),this.registerHandlers(),this.api=new y(this.app,this.tc)}async markInCycle(e,s){let i=this.app.workspace.getActiveFile();await this.app.vault.process(i,a=>this.tc.markInCycle(a,e,s))}async editLines(e,s){let i=this.app.workspace.getActiveFile();await this.app.vault.process(i,a=>this.tc.markSelectedTask(a,e,s))}async collectTasks(){let e=this.app.workspace.getActiveFile();await this.app.vault.process(e,s=>this.tc.moveAllTasks(s))}async resetAllTasks(){let e=this.app.workspace.getActiveFile();await this.app.vault.process(e,s=>this.tc.resetAllTasks(s))}getCurrentLinesFromEditor(e){this.tc.logDebug("from: %o, to: %o, anchor: %o, head: %o, general: %o",e.getCursor("from"),e.getCursor("to"),e.getCursor("anchor"),e.getCursor("head"),e.getCursor());let s,i,a=[];if(e.somethingSelected()){s=e.getCursor("from"),i=e.getCursor("to");for(let n=s.line;n<=i.line;n++)a.push(n)}else s=e.getCursor(),a.push(s.line);return{start:s,end:i,lines:a}}buildContextMenu(e,s,i){this.tc.settings.contextMenu.markTask&&(e.addItem(a=>a.setTitle("(TC) Mark Task").setIcon("check-square").onClick(async()=>{this.tc.logDebug("Mark task",e,s,i);let n=await E(this.app,this.tc);n&&(await this.editLines(n,i.lines),this.restoreCursor(i,s.editor))})),this.tc.settings.markCycle&&(e.addItem(a=>a.setTitle("(TC) Mark with next").setIcon("forward").onClick(async()=>{this.tc.logDebug("Mark with next",e,s,i),await this.markInCycle(1,i.lines),this.restoreCursor(i,s.editor)})),e.addItem(a=>a.setTitle("(TC) Mark with previous").setIcon("reply").onClick(async()=>{this.tc.logDebug("Mark with previous",e,s,i),await this.markInCycle(0,i.lines),this.restoreCursor(i,s.editor)})))),Object.entries(this.tc.cache.marks).forEach(([a,n])=>{n.useContextMenu&&e.addItem(o=>o.setTitle(a===u?"(TC) Append text":`(TC) Change to '[${a}]' (${n.name})`).setIcon("check-circle").onClick(async()=>{this.tc.logDebug(`Change to '${a}'`,e,s,i),await this.editLines(a,i.lines),this.restoreCursor(i,s.editor)}))}),this.tc.settings.contextMenu.resetAllTasks&&e.addItem(a=>a.setTitle("(TC) Reset all tasks").setIcon("blocks").onClick(async()=>{this.tc.logDebug("Reset all tasks",e,s),await this.resetAllTasks(),this.restoreCursor(i,s.editor)})),this.tc.settings.collectionEnabled&&this.tc.settings.contextMenu.collectTasks&&e.addItem(a=>a.setTitle("(TC) Collect tasks").setIcon("tornado").onClick(async()=>{await this.collectTasks(),this.restoreCursor(i,s.editor)}))}restoreCursor(e,s){e.lines.length>1?s.setSelection(e.start,e.end):s.setCursor(e.start)}registerCommands(){if(!this.commandsRegistered){this.tc.logDebug("register commands"),this.commandsRegistered=!0;let e={id:"task-collector-mark",name:"Mark task",icon:"check-square",editorCallback:async(s,i)=>{let a=await E(this.app,this.tc);if(a){let n=this.getCurrentLinesFromEditor(s);await this.editLines(a,n.lines),this.restoreCursor(n,s)}}};if(this.addCommand(e),this.tc.settings.collectionEnabled){let s={id:"task-collector-move-completed-tasks",name:"Collect tasks",icon:"tornado",callback:async()=>{this.collectTasks()}};this.addCommand(s)}if(this.tc.settings.markCycle){let s={id:"task-collector-mark-next",name:"Mark with next",icon:"forward",editorCallback:async(a,n)=>{this.tc.logDebug(`${s.id}: callback`,a,n);let o=this.getCurrentLinesFromEditor(a);await this.markInCycle(1,o.lines),this.restoreCursor(o,a)}};this.addCommand(s);let i={id:"task-collector-mark-prev",name:"Mark with previous",icon:"reply",editorCallback:async(a,n)=>{this.tc.logDebug(`${i.id}: callback`,a,n);let o=this.getCurrentLinesFromEditor(a);await this.markInCycle(0,o.lines),this.restoreCursor(o,a)}};this.addCommand(i)}if(Object.entries(this.tc.cache.marks).forEach(([s,i])=>{if(i.registerCommand){let a={id:`task-collector-mark-task-${s}`,name:s==u?"Append text":`Mark with '${s}'`,icon:s==u?"list-plus":"check-circle",editorCallback:async(n,o)=>{let c=this.getCurrentLinesFromEditor(n);this.tc.logDebug(`${a.id}: callback`,c,n,o),await this.editLines(s,c.lines),this.restoreCursor(c,n)}};this.addCommand(a)}}),this.tc.settings.contextMenu.resetAllTasks){let s={id:"task-collector-reset-all-tasks",name:"Reset all tasks",icon:"blocks",callback:async()=>{this.resetAllTasks()}};this.addCommand(s)}}}unregisterCommands(){this.tc.logDebug("unregister commands"),this.commandsRegistered=!1;let e=Object.keys(app.commands.commands).filter(s=>s.startsWith("task-collector-"));for(let s of e)app.commands.removeCommand(s)}registerHandlers(){this.handlersRegistered||(this.tc.logDebug("register handlers"),this.handlersRegistered=!0,this.tc.cache.useContextMenu&&this.registerEvent(this.editTaskContextMenu=this.app.workspace.on("editor-menu",async(e,s,i)=>{this.buildContextMenu(e,i,this.getCurrentLinesFromEditor(s))})),(this.tc.cache.useContextMenu||this.tc.settings.previewClickModal)&&this.registerMarkdownPostProcessor(this.postProcessor=(e,s)=>{let i=e.querySelectorAll(".task-list-item-checkbox");if(!i.length)return;let a=!!e.closest(".markdown-rendered");this.tc.logDebug("markdown postprocessor",`use context menu: ${this.tc.cache.useContextMenu};`,`preview click modal: ${this.tc.settings.previewClickModal};`,s,a,i);for(let n of Array.from(i)){let o=s.getSectionInfo(n);if(!o)continue;let{lineStart:c}=o,l=Number(n.dataset.line);this.tc.cache.useContextMenu&&this.registerDomEvent(n.parentElement,"contextmenu",p=>{let k=this.app.workspace.getActiveViewOfType(T.MarkdownView);if(k){let g=new T.Menu;this.buildContextMenu(g,k,{start:{line:c+l,ch:0},lines:[c+l]}),g.showAtMouseEvent(p)}}),this.tc.settings.previewClickModal&&!a&&this.registerDomEvent(n,"click",async p=>{p.stopImmediatePropagation(),p.preventDefault();let k=await E(this.app,this.tc);k&&await this.editLines(k,[c+l])})}}))}unregisterHandlers(){this.tc.logDebug("unregister handlers"),this.handlersRegistered=!1,this.editTaskContextMenu&&(this.app.workspace.offref(this.editTaskContextMenu),this.editTaskContextMenu=null),this.postProcessor&&(T.MarkdownPreviewRenderer.unregisterPostProcessor(this.postProcessor),this.postProcessor=null)}onunload(){console.log("unloading Task Collector"),this.unregisterCommands(),this.unregisterHandlers()}async loadSettings(){let e=Object.assign({},await this.loadData());this.tc.init(await f.constructSettings(this,e))}async saveSettings(){await this.saveData(this.tc.settings),this.handlersRegistered&&(this.unregisterHandlers(),this.registerHandlers()),this.commandsRegistered&&(this.unregisterCommands(),this.registerCommands())}};function de(r,t){return z.ViewPlugin.fromClass(class{constructor(e){this.view=e,this.tcp=r,this.eventHandler=async s=>{let{target:i}=s,a=this.tcp.app.workspace.getActiveFile();if(!a||!(i instanceof HTMLInputElement)||i.type!=="checkbox")return!1;console.debug("TC ViewPlugin: click",i),s.stopImmediatePropagation(),s.preventDefault();let n=await E(this.tcp.app,t);return n?(await this.tcp.app.vault.process(a,o=>{let c=this.view.posAtDOM(i),l=e.state.doc.lineAt(c),p=o.split(`
`).findIndex(k=>k===l.text);if(t.logDebug("TC ViewPlugin: mark task",a.path,n,l,p),r.tc.anyTaskMark.test(l.text))return t.markSelectedTask(o,n,[p]);{let k=Number(i.dataset.line);return t.markSelectedTask(o,n,[p+k])}}),!0):!1},this.eventHandler.bind(this),this.view.dom.addEventListener("click",this.eventHandler),console.debug("TC ViewPlugin: create click handler")}destroy(){this.view.dom.removeEventListener("click",this.eventHandler),console.debug("TC ViewPlugin: destroy click handler")}})}var ge=A;
