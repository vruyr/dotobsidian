/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var D=Object.defineProperty;var W=Object.getOwnPropertyDescriptor;var z=Object.getOwnPropertyNames;var J=Object.prototype.hasOwnProperty;var K=(n,t)=>{for(var e in t)D(n,e,{get:t[e],enumerable:!0})},q=(n,t,e,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of z(t))!J.call(n,a)&&a!==e&&D(n,a,{get:()=>t[a],enumerable:!(s=W(t,a))||s.enumerable});return n};var Z=n=>q(D({},"__esModule",{value:!0}),n);var de={};K(de,{default:()=>he});module.exports=Z(de);var C=require("obsidian");var u="\xD8",g="text",p="default",f="complete",L={groups:{default:{name:p,marks:" ",complete:!1,removeExpr:"",appendDateFormat:"",registerCommand:!1,useContextMenu:!1},complete:{name:f,marks:"xX",complete:!0,removeExpr:"",appendDateFormat:"",registerCommand:!1,useContextMenu:!1}},markCycle:"",collectionEnabled:!1,previewClickModal:!0,contextMenu:{markTask:!0,resetTask:!1,resetAllTasks:!1,collectTasks:!0},debug:!1,convertEmptyLines:!1,version:{major:0,minor:0,patch:0}},P={name:p,marks:"",complete:!1,removeExpr:"",appendDateFormat:"",registerCommand:!1,useContextMenu:!1};var N={areaHeading:"## Log",removeCheckbox:!1},F={useContextMenu:!1,completedMarks:"",incompleteMarks:"",marks:{},removeExpr:{},undoExpr:{},areaHeadings:[],headingToMark:{}},H={completedAreaHeader:"## Log",removeExpression:"",appendDateFormat:"",appendRemoveAllTasks:!1,incompleteTaskValues:" ",onlyLowercaseX:!1,supportCanceledTasks:!0,previewOnClick:!1,rightClickComplete:!1,rightClickMark:!1,rightClickMove:!1,rightClickResetTask:!1,rightClickResetAll:!1,rightClickToggleAll:!1,completedAreaRemoveCheckbox:!1};var O=require("obsidian");var k={constructSettings:Q,createSettingsGroup:$,sanitize:V,sanitizeMarks:w,moveGroup:b};function w(n){let t=Array.from(new Set(n));return t.sort(),t.join("").replace(u,"")}function V(n,t){n.tc.logDebug("sanitize begin",t);let e=!1;t.markCycle&&(t.markCycle=[...new Set(t.markCycle)].join("")),Object.entries(t.groups).filter(([a,o])=>a!==o.name).forEach(([a,o])=>{e=!0,t.groups[o.name]?(console.warn(`(TC) Group named ${o.name} already exists. Reverting group name to ${a}`),o.name=a):b(t.groups,a,o.name)}),R(t.groups[g])&&(e=!0,t.groups[g].marks=u);let s=Object.entries(t.groups).filter(([a,o])=>!R(o));if(s.length>1){e=!0,console.warn(`(TC) There can be only one group for text-only settings (${g}).`),t.groups[g]||(console.info(`(TC) Configuration: renamed group ${s[0][1].name} to ${g}.`),b(t.groups,s[0][1].name,g));let a="",o;Object.entries(t.groups).filter(([r,i])=>!R(i)).filter(([r,i])=>r!==g).forEach(([r,i])=>{[a,o]=ae(a),t.groups[r].marks=o})}else s.length==1&&s[0][1].name!==g&&(console.info(`(TC) Configuration: renamed group ${s[0][1].name} to ${g}.`),b(t.groups,s[0][1].name,g));t.groups[g]&&t.groups[g].collection&&delete t.groups[g].collection,e&&new O.Notice("(TC) Configuration settings were modified. See console for details."),n.tc.logDebug("sanitize end",t)}async function Q(n,t){return t.version?await ee(n,t):await te(n,t)}async function ee(n,t){let e={...L,...t};V(n,e);let s=_(n.manifest.version);return se(s,e.version)===0||(e.version=s,await n.saveData(e)),e}async function te(n,t){console.info("(TC) Migrating 0.x settings to the current version"),console.debug("0.x settings",t);let e={...H,...t},s=JSON.parse(JSON.stringify(L));s.previewClickModal=e.previewOnClick,s.contextMenu.markTask=e.rightClickMark,s.contextMenu.resetTask=e.rightClickResetTask,s.groups[f].useContextMenu=e.rightClickComplete;let a;return a="x",e.onlyLowercaseX||(a+="X"),e.supportCanceledTasks&&(a+="-"),s.groups[f].marks=w(a),s.groups[f].appendDateFormat=e.appendDateFormat,s.groups[f].removeExpr=e.removeExpression,a=e.incompleteTaskValues,s.groups[p].marks=w(a),e.appendRemoveAllTasks&&(s.groups[p].appendDateFormat=e.appendDateFormat,s.groups[p].removeExpr=e.removeExpression),s.collectionEnabled=!0,s.contextMenu.collectTasks=e.rightClickMove||!1,t.cycleTaskValues&&(s.markCycle=t.cycleTaskValues,t.incompleteTaskValuesRow2&&$(s.groups,"group-2",{marks:w(t.incompleteTaskValuesRow2),appendDateFormat:t.appendTextFormatMarkRow2}),t.appendTextFormatMark&&(s.groups[p].appendDateFormat=t.appendTextFormatMark),t.appendTextFormatAppend&&$(s.groups,g,{marks:u,appendDateFormat:t.appendTextFormatAppend,useContextMenu:t.rightClickAppend}),console.log(s.groups),s.collectionEnabled=!1),s.collectionEnabled&&(s.groups[f].collection={areaHeading:e.completedAreaHeader,removeCheckbox:e.completedAreaRemoveCheckbox}),s.version=_(n.manifest.version),n.tc.logDebug("migrated settings",s),await n.saveData(s),s}function $(n,t,e){n[t]={...P,name:t,...e},n[t].marks===""&&(n[t].marks=u)}function _(n){let t=n.split(".");return{major:Number(t[0]),minor:Number(t[1]),patch:Number(t[2])}}function se(n,t){return n.major===t.major?n.minor===t.minor?n.patch-t.patch:n.minor-t.minor:n.major-t.major}function R(n){return n&&n.marks!==""&&n.marks!==u}function b(n,t,e){!n||!t||!e||e===t||(n[e]?console.warn(`(TC) Can not move group, ${e} already exists`):(n[t].name=e,n[e]=n[t],delete n[t]))}function ae(n){let t=0;do{let e=String.fromCharCode(9812+Math.random()*20);if(n.indexOf(e)<0)return n+=e,[n,e];t++}while(t<10);return[n,String.fromCharCode(9447)]}var oe=/^(Y|D|M|H|h|m)+$/,re=/(\[[^[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;var x=class{constructor(){this.anyListItem=new RegExp(/^([\s>]*(?:-|\d+\.) )([^\\[].*)$/);this.anyTaskMark=new RegExp(/^([\s>]*(?:-|\d+\.) \[)(.)(\] .*)$/);this.anyText=new RegExp(/^([\s>]*)(.*)$/);this.blockQuote=new RegExp(/^(\s*>[\s>]*)(.*)$/);this.blockRef=new RegExp(/^(.*?)( \^[A-Za-z0-9-]+)?$/);this.continuation=new RegExp(/^( {2,}|\t)/);this.stripTask=new RegExp(/^([\s>]*(?:-|\d+\.)) \[.\] (.*)$/)}init(t){this.settings=t,this.cache=JSON.parse(JSON.stringify(F)),this.cache.useContextMenu=t.contextMenu.markTask||t.contextMenu.resetTask||t.contextMenu.collectTasks||t.contextMenu.resetAllTasks,Object.values(t.groups).forEach(e=>this.cacheTaskSettings(e,this.cache)),this.settings.collectionEnabled&&(this.cache.areaHeadings=[...Object.keys(this.cache.headingToMark)],this.cache.areaHeadings.sort()),this.cache.completedMarks=k.sanitizeMarks(this.cache.completedMarks),this.cache.incompleteMarks=k.sanitizeMarks(this.cache.incompleteMarks),this.logDebug("configuration read",this.settings,this.cache)}logDebug(t,...e){(!this.settings||this.settings.debug)&&console.debug("(TC) "+t,...e)}cacheTaskSettings(t,e){t.marks.split("").forEach(s=>{if(e.marks[s]){let a=e.marks[s].name;console.warn(`Two groups of settings contain ${s}: ${a} and ${t.name}. Using ${a}`)}else{if(e.marks[s]=t,e.useContextMenu==e.useContextMenu||t.useContextMenu,t.removeExpr){let a=G(t.removeExpr);e.removeExpr[t.name]=a}if(t.appendDateFormat){let a=U(t.appendDateFormat);e.undoExpr[t.name]=a}t.collection&&t.collection.areaHeading&&(e.headingToMark[t.collection.areaHeading]?e.headingToMark[t.collection.areaHeading]+=s:e.headingToMark[t.collection.areaHeading]=s),s!==u&&(t.complete?e.completedMarks+=s:e.incompleteMarks+=s)}})}markInCycle(t,e,s=[]){let a=t.split(`
`),o=this.settings.markCycle.length;for(let r of s){let i=this.anyTaskMark.exec(a[r]),c=this.anyListItem.exec(a[r]);if(i){let l=i[2],m=this.settings.markCycle.indexOf(l),d=m<0?e==1?0:o-1:e==1?(m+1)%o:(m+o-1)%o;a[r]=this.doMarkTask(a[r],l,this.settings.markCycle[d])}else c&&c[2]&&(a[r]=this.updateLineText(`${c[1]}[ ] ${c[2]}`,this.settings.markCycle[e==1?0:o-1]))}return a.join(`
`)}markSelectedTask(t,e,s=[]){let a=t.split(`
`);for(let o of s)a[o]=this.updateLineText(a[o],e);return a.join(`
`)}updateLineText(t,e){if(e==="Backspace")return this.doRemoveTask(t);if(e===""&&(e=u),e===u&&this.cache.marks[u])return this.doAppendText(t);let s=this.anyTaskMark.exec(t);if(s){let o=s[2];return this.doMarkTask(t,o,e)}let a=this.anyListItem.exec(t);if(a&&a[2])return this.updateLineText(`${a[1]}[ ] ${a[2]}`,e);if(t&&this.settings.convertEmptyLines){let o=this.anyText.exec(t);return this.updateLineText(`${o[1]}- [ ] ${o[2]}`,e)}return this.logDebug("not a task or list item %s",`|${t}|`),t}doAppendText(t,e=!0){let s="",a=t.endsWith("  "),o=this.blockRef.exec(t);o&&o[2]&&(t=o[1],s=o[2]);let r=this.cache.undoExpr[g];if(r&&(t=t.replace(r,"")),e){let i=this.cache.removeExpr[g];i&&(t=t.replace(i,""));let c=this.settings.groups[g].appendDateFormat;c&&(t.endsWith(" ")||(t+=" "),t+=window.moment().format(c))}return t=t.replace(/\s*$/,s),a&&(t+="  "),this.logDebug("text updated",`|${t}|`),t}doMarkTask(t,e,s){if(e===s)return this.logDebug("task already marked",`|${t}|`),t;this.logDebug("mark task",`|${t}|`);let a=this.cache.marks[e]?.name||p,o=this.cache.marks[s]?.name||p;t=t.replace(this.anyTaskMark,`$1${s}$3`);let r="",i=t.endsWith("  "),c=this.blockRef.exec(t);c&&c[2]&&(t=c[1],r=c[2]);let l=this.cache.undoExpr[a];l&&(t=t.replace(l,""));let m=this.cache.removeExpr[o];m&&(t=t.replace(m,""));let d=this.settings.groups[o].appendDateFormat;return d&&(t.endsWith(" ")||(t+=" "),t+=window.moment().format(d)),t=t.replace(/\s*$/,r),i&&(t+="  "),this.logDebug("task marked",`|${t}|`),t}doRemoveTask(t){return t.replace(this.stripTask,"$1 $2")}resetAllTasks(t){let e=t.split(`
`),s=[],a=!1;for(let o of e){let r=o.trim();a?((o.startsWith("#")||r==="---")&&(a=M(this.cache.areaHeadings,r)!=null),s.push(o)):r.startsWith("#")&&M(this.cache.areaHeadings,r)?(a=!0,s.push(o)):s.push(o.replace(this.anyTaskMark,"$1 $3"))}return s.join(`
`)}moveAllTasks(t){if(this.cache.areaHeadings.length==0)return t;let e=[],s=[],a=this.scan(t,e,s),o=this.move(e,a,s,0);for(let r=0;r<s.length;r++){let[i,c]=s[r].split("%:%"),l=Number(c);a[i].blocks[l].existing=this.move(a[i].blocks[l].existing,a,s,r,this.cache.headingToMark[i])}return o.flatMap(r=>{let i=r.match(/%%--TC--(.*)--(\d+)--%%/);if(i){let c=i[1],l=Number(i[2]);return a[c].blocks[l].newTasks.concat(...a[c].blocks[l].existing)}return r}).join(`
`)}scan(t,e,s){let a=t.split(`
`);this.ensureHeadings(a);let o={},r=null;for(let i of a){let c=i.trim();if(i.startsWith("#")&&M(this.cache.areaHeadings,c)){e.push(i);let l=this.createCompletionArea(c,o);r=o[c].blocks[l].existing,e.push(`%%--TC--${c}--${l}--%%`),s.push(`${c}%:%${l}`)}else r&&(i.startsWith("#")||i.trim()==="---")?(r=null,e.push(i)):r?r.push(i):e.push(i)}return o}move(t,e,s,a,o){let r=[],i=null,c=null,l=!1,m=-1;for(let d of t){if(m++,c&&!this.isTaskLine(d)&&this.isContinuation(d,l,t,m)){c.push(d);continue}if(c&&(this.moveMark(i,c,e,s,a),i=null,c=null,l=!1),d.startsWith("%%--TC--")){a=ie(d),r.push(d);continue}let v=this.anyTaskMark.exec(d);if(v){let E=v[2];o&&o.indexOf(E)>=0?r.push(d):this.isCollected(E)?(this.removeCheckbox(E)&&(d=this.doRemoveTask(d)),i=E,c=[],c.push(d),l=this.isCallout(d)):r.push(d)}else r.push(d)}return c&&i&&this.moveMark(i,c,e,s,a),r}moveMark(t,e,s,a,o){let r=this.cache.marks[t].collection.areaHeading,i=this.findNextSection(r,a,o);e.forEach(c=>s[r].blocks[i].newTasks.push(c))}findNextSection(t,e,s){let a=!1;for(let o=s;!a||o!=s;o++)if(o==e.length&&(o=0,a=!0),e[o].startsWith(t)){let[r,i]=e[o].split("%:%");return Number(i)}}createCompletionArea(t,e){return e[t]||(e[t]={blocks:[]}),e[t].blocks.push({existing:[],newTasks:[]}),e[t].blocks.length-1}ensureHeadings(t){this.cache.areaHeadings.forEach(e=>{M(t,e)||(t[t.length-1].trim()!==""&&t.push(""),t.push(e),t.push(""))})}isCollected(t){return this.cache.marks[t]&&this.cache.marks[t].collection&&this.cache.marks[t].collection.areaHeading}removeCheckbox(t){return this.cache.marks[t]&&this.cache.marks[t].collection&&this.cache.marks[t].collection.removeCheckbox}isCallout(t){return this.blockQuote.test(t)}isTaskLine(t){return this.anyTaskMark.test(t)}isContinuation(t,e,s,a){if(e){let o=this.blockQuote.exec(t);if(o)return o[1].endsWith(">")||o[1].endsWith("  ")||o[1].endsWith("	")}if(t.length==0){let o=a+1;for(;o<s.length;){if(s[o].length>0)return this.continuation.test(s[o]);o++}}return this.continuation.test(t)}};function M(n,t){return n.find(e=>e===t)}function ie(n){let t=n.match(/%%--TC--(.*)--(\d+)--%%/);if(t)return Number(t[2])}var j={tryCompleteRegex:ne,tryIncompleteRegex:ce,tryUndoRegex:U,tryRemoveTextRegex:G};function ne(n){return new RegExp(`^([\\s>]*- \\[)[${n}](\\] .*)$`)}function ce(n){return new RegExp(`^([\\s>]*- \\[)[${n}](\\] .*)$`)}function G(n){return n?new RegExp(n,"g"):null}function U(n){let t=n.match(re);for(let s=0,a=t.length;s<a;s++){let o=t[s];oe.test(o)?t[s]=o.replace(/YYYY/g,"\\d{4}").replace(/YY/g,"\\d{2}").replace(/DD/g,"\\d{2}").replace(/D/g,"\\d{1,2}").replace(/MMM/g,"[A-Za-z]{3}").replace(/MM/g,"\\d{2}").replace(/M/g,"\\d{1,2}").replace(/HH/g,"\\d{2}").replace(/H/g,"\\d{1,2}").replace(/hh/g,"\\d{2}").replace(/h/g,"\\d{1,2}").replace(/mm/g,"\\d{2}").replace(/m/g,"\\d{1,2}"):o.match(/\[[\s\S]/)?t[s]=Y(o.replace(/^\[|\]$/g,"")):t[s]=Y(o)}let e=`\\s*${t.join("")}\\s*`;return new RegExp(e+"( \\^[A-Za-z0-9-]+)?$")}function Y(n){return n.replace(/\(/g,"\\(").replace(/\)/g,"\\)").replace(/\[/g,"\\[").replace(/\]/g,"\\]")}var h=require("obsidian");var y=class extends h.PluginSettingTab{constructor(e,s,a){super(e,s);this.markInputCache={};this.otherInputCache={};this.plugin=s,this.tc=a}save(){k.sanitize(this.plugin,this.newSettings),this.tc.init(this.newSettings),this.plugin.saveSettings(),new h.Notice("(TC) Configuration saved")}hide(){this.save()}display(){this.newSettings=JSON.parse(JSON.stringify(this.tc.settings)),this.drawElements()}drawElements(){this.containerEl.empty(),this.containerEl.addClass("task-collector-settings"),new h.Setting(this.containerEl).setHeading().setName("Task Collector"),new h.Setting(this.containerEl).setName("Save settings").setClass("task-collector-save-reset").addButton(e=>e.setIcon("reset").setTooltip("Reset to previously saved (or generated) values").onClick(()=>{this.newSettings=JSON.parse(JSON.stringify(this.tc.settings)),this.display(),new h.Notice("(TC) Configuration reset")})).addButton(e=>{e.setIcon("save").setTooltip("Save current values").onClick(()=>{this.save()}),this.saveButton=e.buttonEl}),new h.Setting(this.containerEl).setName("Task Collection").setDesc("Enable task collection (additional task group settings when enabled)").addToggle(e=>e.setValue(this.newSettings.collectionEnabled).onChange(async s=>{let a=s!=this.newSettings.collectionEnabled;this.newSettings.collectionEnabled=s,a&&this.drawElements()})),new h.Setting(this.containerEl).setName("Define task mark cycle").setDesc("Specify characters (as a string) for Previous/Next commands").addText(e=>e.setPlaceholder("").setValue(this.newSettings.markCycle).onChange(async s=>{this.newSettings.markCycle=[...new Set(s)].join("")})),new h.Setting(this.containerEl).setName("Convert non-list lines").setDesc("Converts non-list lines when marking tasks").addToggle(e=>e.setValue(this.newSettings.convertEmptyLines).onChange(async s=>{this.newSettings.convertEmptyLines=s})),new h.Setting(this.containerEl).setHeading().setName("Task Groups"),this.containerEl.createEl("p",{text:"Task collector configures tasks in groups. Each group can be associated with one or more task marks ('x' or '>'). The default group configuration will apply to any mark not otherwise assigned to a group."}),this.containerEl.createEl("p",{text:"Marks that you define within the following groups appear in the selection modal. Those marks that 'complete' a task will appear in the top row."}),this.groupList=this.containerEl.createEl("dl"),this.showTaskGroups(),new h.Setting(this.containerEl).setClass("tc-create-task-group").addButton(e=>e.setTooltip("Add a new task group").setButtonText("+").onClick(()=>{let s=`group-${Object.values(this.newSettings.groups).length}`;k.createSettingsGroup(this.newSettings.groups,s,{}),this.showTaskGroups()})),new h.Setting(this.containerEl).setHeading().setName("Menus and Modals"),this.containerEl.createEl("p",{text:"Task Collector creates commands that can be bound to hotkeys or accessed using slash commands for marking tasks. The following settings add right click context menu items for those commands."}),new h.Setting(this.containerEl).setName("Click handling: Prompt when the checkbox is clicked in Reading or Live preview mode").setDesc("When you click a checkbox, display a panel that allows you to select (with mouse or keyboard) the value to assign.").addToggle(e=>e.setValue(this.newSettings.previewClickModal).onChange(async s=>{this.newSettings.previewClickModal=s})),new h.Setting(this.containerEl).setName("Add '(TC) Mark task' menu item").setDesc("Add an item to the right-click menu to mark the task on the current line (or within the current selection). This menu item will trigger a quick pop-up modal to select the desired mark value.").addToggle(e=>e.setValue(this.newSettings.contextMenu.markTask).onChange(async s=>{this.newSettings.contextMenu.markTask=s})),new h.Setting(this.containerEl).setName("Add `(TC) Collect Tasks` menu item").setDesc("Add an item to the right-click menu to collect tasks (based on task configuration).").addToggle(e=>e.setValue(this.newSettings.contextMenu.collectTasks).onChange(async s=>{this.newSettings.contextMenu.collectTasks=s})),new h.Setting(this.containerEl).setName("Add '(TC) Reset All Tasks' command and menu item").setDesc("Add a command and an item to the right-click menu to reset/clear all tasks in the current file.").addToggle(e=>e.setValue(this.newSettings.contextMenu.resetAllTasks).onChange(async s=>{this.newSettings.contextMenu.resetAllTasks=s})),new h.Setting(this.containerEl).setHeading().setName("Other settings"),new h.Setting(this.containerEl).setName("Debug").setDesc("Enable debug messages").addToggle(e=>e.setValue(this.newSettings.debug).onChange(async s=>{this.newSettings.debug=s}))}showTaskGroups(){this.markInputCache={},this.otherInputCache={},this.groupList.empty(),this.clearButtonErrors(),this.createGroupItem(this.newSettings.groups[p]),Object.values(this.newSettings.groups).filter(e=>e.name!=p).forEach(e=>{this.createGroupItem(e)})}createGroupItem(e){let s=this.groupList.createEl("dt"),a=this.groupList.createEl("dd"),o=new h.Setting(s).setName("Group name").setDesc("Name for this group").setClass("task-group-name");if(e.name===g&&o.addExtraButton(r=>{r.setIcon("info").setTooltip("This is a special group that supports appending text to arbitrary lines of text").setDisabled(!0)}),o.addText(r=>{r.setPlaceholder(f).setValue(e.name).setDisabled(e.name===p).onChange((0,h.debounce)(i=>{let c=this.newSettings.groups[i];i?c&&c!=e?(r.inputEl.addClass("data-value-error"),r.inputEl.setAttribute("aria-label","This name is already used by another group")):(r.inputEl.removeClass("data-value-error"),r.inputEl.removeAttribute("aria-label"),k.moveGroup(this.newSettings.groups,e.name,i),i===g&&(e.marks=u,this.drawElements())):(r.inputEl.addClass("data-value-error"),r.inputEl.setAttribute("aria-label","A group name is required.")),this.testForErrors()},50,!0)),this.addToCache(r.inputEl,"name-setting")}),o.addExtraButton(r=>{r.setIcon(e.name===p?"info":"trash").setTooltip(e.name===p?"Default task settings":"Delete this group").setDisabled(e.name===p).onClick(async()=>{delete this.newSettings.groups[e.name],this.showTaskGroups()})}),e.name===p?o.controlEl.addClass("default-group"):e.name===g&&o.controlEl.addClass("text-only-group"),e.name!==g){let r=new h.Setting(a).setName("Task marks").setClass("task-marks");e.name!==p?(r.addToggle(i=>{i.setValue(e.complete),i.setTooltip("If enabled, this group represents completed items. Completed items appear in the top row of the selection menu.").onChange(async c=>{e.complete=c})}),r.setDesc("Set one or marks associated with this group as a string. e.g. '>?!'. Use a space for unmarked tasks. Enable the toggle if this group represents completed tasks.")):r.setDesc("Set one or marks associated with this group as a string. e.g. '>?!'. Use a space for unmarked tasks. "),r.addText(i=>{i.setPlaceholder("xX").onChange((0,h.debounce)(c=>{let l=k.sanitizeMarks(c);l!=c&&(i.inputEl.value=l),l!=e.marks&&(this.removeMarks(e.marks,i.inputEl),e.marks=l,r.controlEl.setAttribute("marks",e.marks),this.findDuplicates(i.inputEl))},50,!0)),e.marks=k.sanitizeMarks(e.marks),i.setValue(e.marks),r.controlEl.setAttribute("marks",e.marks),this.findDuplicates(i.inputEl)})}new h.Setting(a).setName(`Append date to ${this.getDescription(e)}`).setDesc(`Append today's date in the given moment.js format to the end of the ${this.getDescription(e)}`).addMomentFormat(r=>{r.setPlaceholder("YYYY-MM-DD").setValue(e.appendDateFormat).onChange((0,h.debounce)(i=>{try{let c=window.moment().format(i);r.inputEl.removeClass("data-value-error"),r.inputEl.setAttribute("aria-label",c),e.appendDateFormat=i}catch{r.inputEl.addClass("data-value-error"),r.inputEl.setAttribute("aria-label","An error occurred parsing this moment string. See log for details."),console.error(`Error parsing specified date format for ${e.name}: ${i}`)}this.testForErrors()},200,!0)),this.addToCache(r.inputEl,"moment-format")}),new h.Setting(a).setName(`Remove text matching pattern from ${this.getDescription(e)}`).setDesc(`Text matching this regular expression will be removed from ${this.getDescription(e)}. Be careful! Test your expression first. The global flag ('g') is used for a per-line match.`).addText(r=>r.setPlaceholder(" #(todo|task)").setValue(e.removeExpr).onChange((0,h.debounce)(i=>{try{j.tryRemoveTextRegex(i),e.removeExpr=i,this.tc.logDebug("remove regex",e.name,e.removeExpr)}catch{console.error(`Error parsing specified text replacement regular expression for ${e.name}: ${i}`)}},50,!0))),new h.Setting(a).setName("Register '(TC) Mark with... ' command").setDesc(e.name===g?"A command will be registered to append text to selected lines":"A command will be registered for each mark in the group.").addToggle(r=>r.setValue(e.registerCommand).onChange(i=>{e.registerCommand=i})),new h.Setting(a).setName("Add '(TC) Mark with... ' menu item").setDesc("A right-click menu item will be added for each mark in the group.").addToggle(r=>r.setValue(e.useContextMenu).onChange(async i=>{e.useContextMenu=i})),this.newSettings.collectionEnabled&&e.name!==g&&(e.collection||(e.collection=JSON.parse(JSON.stringify(N))),new h.Setting(a).setName("Area heading").setClass("area-heading").setDesc("Marked tasks will be collected and moved under the specified heading. Task collection for a group only occurs when an area heading is configured.").addText(r=>r.setPlaceholder("## Example").setValue(e.collection.areaHeading).onChange(async i=>{e.collection.areaHeading=i})),new h.Setting(a).setName("Remove checkbox").setClass("remove-checkbox").setDesc("When a task is collected, remove the checkbox").addToggle(r=>r.setValue(e.collection.removeCheckbox).onChange(async i=>{e.collection.removeCheckbox=i})))}removeMarks(e,s){let a=e?e.split(""):[];this.tc.logDebug(`removeMarks begin: '${e}'`,this.markInputCache),s.hasClass("no-marks-defined")&&(s.removeClass("no-marks-defined"),s.removeClass("data-value-error"),s.removeAttribute("aria-label")),a.forEach(o=>{if(this.tc.logDebug(`(TC): remove mark '${o}'`,this.markInputCache[o]),this.markInputCache[o]){let r=this.markInputCache[o];r.delete(s),this.tryRemoveConflict(o,s),r.size==1&&r.forEach(i=>this.tryRemoveConflict(o,i))}}),this.tc.logDebug(`removeMarks end: '${e}'`,this.markInputCache)}findDuplicates(e){let s=e.value?e.value.split(""):[];this.tc.logDebug(`findDuplicates begin: '${e.value}'`,s,e,this.markInputCache),s.forEach(a=>{if(this.markInputCache[a]){let o=this.markInputCache[a];o.add(e),o.size>1&&(o.forEach(r=>this.trySetConflict(a,r)),console.error(`(TC) More then one group uses task mark ${this.showMark(a)}`))}else this.markInputCache[a]=new Set,this.markInputCache[a].add(e)}),s.length==0&&(e.addClass("no-marks-defined"),e.addClass("data-value-error"),e.setAttribute("aria-label",this.newSettings.groups[g]?"Must define one or more marks for this group.":`Must define one or more marks for this group. Change the name to '${g}' for special text-only behavior.`),this.tc.logDebug(`findDuplicates end (empty): '${e.value}'`,e,this.markInputCache)),this.tc.logDebug(`findDuplicates end: '${e.value}'`,e,this.markInputCache),this.testForErrors()}trySetConflict(e,s){let a=s.getAttribute("conflict")||"",o=k.sanitizeMarks(a+e);s.setAttribute("conflict",o),s.addClass("data-value-error"),s.setAttribute("aria-label",`More than one task group uses ${this.showMark(o)}`),this.tc.logDebug(`conflicts for '${s.value}': '${this.showMark(o)}'`)}tryRemoveConflict(e,s){if(!s.hasAttribute("conflict"))return;let a=s.getAttribute("conflict").replace(e,"");a.length==0?(s.removeAttribute("conflict"),s.removeClass("data-value-error"),s.removeAttribute("aria-label")):(s.removeAttribute("conflict"),this.trySetConflict(a,s))}getDescription(e){return e.name===g?"selected lines of text":"selected task(s)"}showMark(e){return e==u?"(empty)":e}clearButtonErrors(){this.saveButton.removeClass("data-value-error"),this.saveButton.removeAttribute("aria-label")}testForErrors(){let e=Object.values(this.markInputCache).flatMap(a=>Array.from(a.values())).find(a=>a.hasClass("data-value-error")),s=Object.values(this.otherInputCache).find(a=>a.hasClass("data-value-error"));e||s?(this.saveButton.addClass("data-value-error"),this.saveButton.setAttribute("aria-label","There are configuration errors. Correct those before saving.")):(this.saveButton.removeClass("data-value-error"),this.saveButton.removeAttribute("aria-label"))}addToCache(e,s){let a=Object.values(this.otherInputCache).length;this.otherInputCache[`${s}-${a}`]=e,e.setAttribute("cache-id",`${s}-${a}`)}removeFromCache(e){let s=e.getAttribute("cache-id");s&&delete this.otherInputCache[s]}};var X=require("obsidian");function T(n,t){return new Promise(e=>{let s=new I(n,t);s.onClose=()=>{e(s.chosenMark)},s.open()})}var I=class extends X.Modal{constructor(e,s){super(e);this.taskCollector=s,this.containerEl.id="taskcollector-modal"}onOpen(){let e=this.contentEl.createDiv("taskcollector-selector markdown-preview-view"),s=e.createEl("ul");s.addClass("contains-task-list"),this.addTaskValues(s,this.taskCollector.cache.completedMarks,!0);let a=e.createEl("ul");a.addClass("contains-task-list"),this.addTaskValues(a,this.taskCollector.cache.incompleteMarks,!1);let o=e.createEl("nav"),r=o.createSpan();r.innerHTML="<b>esc</b> to dismiss";let i=o.createSpan();i.innerHTML="<b>bksp</b> to remove <code>[]</code>";let c=this,l=function(m){switch(m.key){case"ArrowLeft":case"ArrowRight":case"ArrowUp":case"ArrowDown":case"CapsLock":case"Tab":break;default:c.chosenMark=m.key,m.preventDefault(),m.stopImmediatePropagation(),c.close()}};this.scope.register([],null,l),this.scope.register(["Shift"],null,l)}addTaskValues(e,s,a){let o=this;for(let r of s){let i=e.createEl("li",{cls:"task-list-item "+(r==" "?"":" is-checked"),attr:{"data-task":r}});i.addEventListener("click",function(l){o.chosenMark=r,o.close()});let c=i.createEl("input",{cls:"task-list-item-checkbox",attr:{id:"task-list-item-checkbox-"+r,type:"checkbox",style:"pointer-events: none;"}});r!=" "&&c.setAttribute("checked",""),i.createEl("span",{text:r==" "?"\u2423":r,attr:{style:"pointer-events: none;"}})}}onClose(){this.contentEl.empty()}};var A=class{constructor(t,e){this.app=t,this.taskCollector=e}getCompletedTaskValues(){return this.taskCollector.cache.completedMarks}getIncompleteTaskValues(){return this.taskCollector.cache.incompleteMarks}getMark(){return T(this.app,this.taskCollector)}isComplete(t){return this.getCompletedTaskValues().contains(t)}isCanceled(t){return t==="-"}};var B=require("@codemirror/view"),S=class extends C.Plugin{constructor(){super(...arguments);this.handlersRegistered=!1;this.commandsRegistered=!1;this.cmExtension=[]}async onload(){console.info("loading Task Collector (TC) v"+this.manifest.version),this.tc=new x,this.addSettingTab(new y(this.app,this,this.tc)),await this.loadSettings(),this.tc.settings.previewClickModal&&(this.cmExtension.push(le(this,this.tc)),this.registerEditorExtension(this.cmExtension)),this.registerCommands(),this.registerHandlers(),this.api=new A(this.app,this.tc)}async markInCycle(e,s){let a=this.app.workspace.getActiveFile();await this.app.vault.process(a,o=>this.tc.markInCycle(o,e,s))}async editLines(e,s){let a=this.app.workspace.getActiveFile();await this.app.vault.process(a,o=>this.tc.markSelectedTask(o,e,s))}async collectTasks(){let e=this.app.workspace.getActiveFile();await this.app.vault.process(e,s=>this.tc.moveAllTasks(s))}async resetAllTasks(){let e=this.app.workspace.getActiveFile();await this.app.vault.process(e,s=>this.tc.resetAllTasks(s))}getCurrentLinesFromEditor(e){this.tc.logDebug("from: %o, to: %o, anchor: %o, head: %o, general: %o",e.getCursor("from"),e.getCursor("to"),e.getCursor("anchor"),e.getCursor("head"),e.getCursor());let s,a,o=[];if(e.somethingSelected()){s=e.getCursor("from"),a=e.getCursor("to");for(let r=s.line;r<=a.line;r++)o.push(r)}else s=e.getCursor(),o.push(s.line);return{start:s,end:a,lines:o}}buildContextMenu(e,s,a){this.tc.settings.contextMenu.markTask&&(e.addItem(o=>o.setTitle("(TC) Mark Task").setIcon("check-square").onClick(async()=>{this.tc.logDebug("Mark task",e,s,a);let r=await T(this.app,this.tc);r&&(await this.editLines(r,a.lines),this.restoreCursor(a,s.editor))})),this.tc.settings.markCycle&&(e.addItem(o=>o.setTitle("(TC) Mark with next").setIcon("forward").onClick(async()=>{this.tc.logDebug("Mark with next",e,s,a),await this.markInCycle(1,a.lines),this.restoreCursor(a,s.editor)})),e.addItem(o=>o.setTitle("(TC) Mark with previous").setIcon("reply").onClick(async()=>{this.tc.logDebug("Mark with previous",e,s,a),await this.markInCycle(0,a.lines),this.restoreCursor(a,s.editor)})))),Object.entries(this.tc.cache.marks).forEach(([o,r])=>{r.useContextMenu&&e.addItem(i=>i.setTitle(o===u?"(TC) Append text":`(TC) Mark with '${o}'`).setIcon("check-circle").onClick(async()=>{this.tc.logDebug(`Mark with '${o}'`,e,s,a),await this.editLines(o,a.lines),this.restoreCursor(a,s.editor)}))}),this.tc.settings.contextMenu.resetAllTasks&&e.addItem(o=>o.setTitle("(TC) Reset all tasks").setIcon("blocks").onClick(async()=>{this.tc.logDebug("Reset all tasks",e,s),await this.resetAllTasks(),this.restoreCursor(a,s.editor)})),this.tc.settings.collectionEnabled&&this.tc.settings.contextMenu.collectTasks&&e.addItem(o=>o.setTitle("(TC) Collect tasks").setIcon("tornado").onClick(async()=>{await this.collectTasks(),this.restoreCursor(a,s.editor)}))}restoreCursor(e,s){e.lines.length>1?s.setSelection(e.start,e.end):s.setCursor(e.start)}registerCommands(){if(!this.commandsRegistered){this.tc.logDebug("register commands"),this.commandsRegistered=!0;let e={id:"task-collector-mark",name:"Mark task",icon:"check-square",editorCallback:async(s,a)=>{let o=await T(this.app,this.tc);if(o){let r=this.getCurrentLinesFromEditor(s);await this.editLines(o,r.lines),this.restoreCursor(r,s)}}};if(this.addCommand(e),this.tc.settings.collectionEnabled){let s={id:"task-collector-move-completed-tasks",name:"Collect tasks",icon:"tornado",callback:async()=>{this.collectTasks()}};this.addCommand(s)}if(this.tc.settings.markCycle){let s={id:"task-collector-mark-next",name:"Mark with next",icon:"forward",editorCallback:async(o,r)=>{this.tc.logDebug(`${s.id}: callback`,o,r);let i=this.getCurrentLinesFromEditor(o);await this.markInCycle(1,i.lines),this.restoreCursor(i,o)}};this.addCommand(s);let a={id:"task-collector-mark-prev",name:"Mark with previous",icon:"reply",editorCallback:async(o,r)=>{this.tc.logDebug(`${a.id}: callback`,o,r);let i=this.getCurrentLinesFromEditor(o);await this.markInCycle(0,i.lines),this.restoreCursor(i,o)}};this.addCommand(a)}if(Object.entries(this.tc.cache.marks).forEach(([s,a])=>{if(a.registerCommand){let o={id:`task-collector-mark-task-${s}`,name:s==u?"Append text":`Mark with '${s}'`,icon:s==u?"list-plus":"check-circle",editorCallback:async(r,i)=>{let c=this.getCurrentLinesFromEditor(r);this.tc.logDebug(`${o.id}: callback`,c,r,i),await this.editLines(s,c.lines),this.restoreCursor(c,r)}};this.addCommand(o)}}),this.tc.settings.contextMenu.resetAllTasks){let s={id:"task-collector-reset-all-tasks",name:"Reset all tasks",icon:"blocks",callback:async()=>{this.resetAllTasks()}};this.addCommand(s)}}}unregisterCommands(){this.tc.logDebug("unregister commands"),this.commandsRegistered=!1;let e=Object.keys(app.commands.commands).filter(s=>s.startsWith("task-collector-"));for(let s of e)app.commands.removeCommand(s)}registerHandlers(){this.handlersRegistered||(this.tc.logDebug("register handlers"),this.handlersRegistered=!0,this.tc.cache.useContextMenu&&this.registerEvent(this.editTaskContextMenu=this.app.workspace.on("editor-menu",async(e,s,a)=>{this.buildContextMenu(e,a,this.getCurrentLinesFromEditor(s))})),(this.tc.cache.useContextMenu||this.tc.settings.previewClickModal)&&this.registerMarkdownPostProcessor(this.postProcessor=(e,s)=>{let a=e.querySelectorAll(".task-list-item-checkbox");if(!a.length)return;let o=!!e.closest(".markdown-rendered");this.tc.logDebug("markdown postprocessor",`use context menu: ${this.tc.cache.useContextMenu};`,`preview click modal: ${this.tc.settings.previewClickModal};`,s,o,a);for(let r of Array.from(a)){let i=s.getSectionInfo(r);if(!i)continue;let{lineStart:c}=i,l=Number(r.dataset.line);this.tc.cache.useContextMenu&&this.registerDomEvent(r.parentElement,"contextmenu",m=>{let d=this.app.workspace.getActiveViewOfType(C.MarkdownView);if(d){let v=new C.Menu;this.buildContextMenu(v,d,{start:{line:c+l,ch:0},lines:[c+l]}),v.showAtMouseEvent(m)}}),this.tc.settings.previewClickModal&&!o&&this.registerDomEvent(r,"click",async m=>{m.stopImmediatePropagation(),m.preventDefault();let d=await T(this.app,this.tc);d&&await this.editLines(d,[c+l])})}}))}unregisterHandlers(){this.tc.logDebug("unregister handlers"),this.handlersRegistered=!1,this.editTaskContextMenu&&(this.app.workspace.offref(this.editTaskContextMenu),this.editTaskContextMenu=null),this.postProcessor&&(C.MarkdownPreviewRenderer.unregisterPostProcessor(this.postProcessor),this.postProcessor=null)}onunload(){console.log("unloading Task Collector"),this.unregisterCommands(),this.unregisterHandlers()}async loadSettings(){let e=Object.assign({},await this.loadData());this.tc.init(await k.constructSettings(this,e))}async saveSettings(){this.tc.logDebug("save settings"),await this.saveData(this.tc.settings),this.handlersRegistered&&(this.unregisterHandlers(),this.registerHandlers()),this.commandsRegistered&&(this.unregisterCommands(),this.registerCommands())}};function le(n,t){return B.ViewPlugin.fromClass(class{constructor(e){this.view=e,this.tcp=n,this.eventHandler=async s=>{let{target:a}=s,o=app.workspace.getActiveFile();if(!o||!a||!(a instanceof HTMLInputElement)||a.type!=="checkbox")return!1;s.stopImmediatePropagation(),s.preventDefault();let r=await T(app,t);return r?(await app.vault.process(o,i=>{let c=this.view.posAtDOM(a),l=e.state.doc.lineAt(c),m=i.split(`
`).findIndex(d=>d===l.text);if(t.logDebug("TC ViewPlugin: mark task",o.path,r,l,m),n.tc.anyTaskMark.test(l.text))return t.markSelectedTask(i,r,[m]);{let d=Number(a.dataset.line);return t.markSelectedTask(i,r,[m+d])}}),!0):!1},this.eventHandler.bind(this),this.view.dom.addEventListener("click",this.eventHandler),console.debug("TC ViewPlugin: create",e)}destroy(){this.view.dom.removeEventListener("click",this.eventHandler),console.debug("TC ViewPlugin: destroy",this.view)}})}var he=S;
